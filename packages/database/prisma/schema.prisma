datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

model User {
  id                 String                  @id @default(cuid())
  email              String                  @unique
  emailVerified      Boolean                 @default(false)
  role               UserRole                @default(USER)
  name               String?
  avatarUrl          String?
  createdAt          DateTime                @default(now())
  hashedPassword     String?
  onboardingComplete Boolean                 @default(false)
  oauthAccounts      UserOauthAccount[]
  sessions           UserSession[]
  memberships        TeamMembership[]
  verificationtokens UserVerificationToken[]
  oneTimePasswords   UserOneTimePassword[]
}

model UserSession {
  id             String   @id
  userId         String
  expiresAt      DateTime
  impersonatorId String?
  user           User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model UserOauthAccount {
  id             String @id @default(cuid())
  providerId     String
  providerUserId String
  userId         String
  user           User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([providerId, providerUserId])
}

model UserVerificationToken {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  token   String
  expires DateTime

  @@index([userId])
}

model UserOneTimePassword {
  id         String                  @id @default(cuid())
  userId     String
  user       User                    @relation(references: [id], fields: [userId], onDelete: Cascade)
  code       String
  type       UserOneTimePasswordType
  identifier String
  expires    DateTime

  @@index([userId])
}

model Brand {
  id                       String         @id @default(cuid())
  slug                     String         @unique
  name                     String
  logoUrl                  String?
  website                  String?
  hqLocation               String?
  numOfEmployees           Int?
  yearFounded              Int?
  ceo                      String?
  summary                  String?
  overview                 String?
  rating                   Float?
  ratesAndFeesRating       Int?
  truthInAdvertisingRating Int?
  consumerReviewsRating    Int?
  customerSupportRating    Int?
  reviewOneliner           String?
  reviewSummaryPoint1      String?
  reviewSummaryPoint2      String?
  reviewSummaryPoint3      String?
  reviewText               String?
  reviewPros               String[]
  reviewCons               String[]
  bestFor                  String?
  specializesIn            String?
  setupFee                 String?
  swipeRate                String?
  earlyTerminationFee      String?
  monthlyFee               String?
  keyedInRate              String?
  contractTerms            String?
  industriesServed         Industry[]
  businessTypesServed      BusinessType[]
  alternatives             Brand[]        @relation("Alternatives")
  alternativeMentions      Brand[]        @relation("Alternatives")
  team                     Team?

  @@index([slug])
}

model Team {
  id           String           @id @default(cuid())
  brand        Brand            @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId      String           @unique
  name         String
  avatarUrl    String?
  memberships  TeamMembership[]
  subscription Subscription?
  invitations  TeamInvitation[]
}

model TeamMembership {
  id        String         @id @default(cuid())
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      TeamMemberRole @default(MEMBER)
  isCreator Boolean        @default(false)

  @@unique([teamId, userId])
}

model TeamInvitation {
  id        String         @id @default(cuid())
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  email     String
  role      TeamMemberRole @default(MEMBER)
  createdAt DateTime       @default(now())
  expiresAt DateTime       @updatedAt

  @@unique([teamId, email])
}

model Subscription {
  id              String             @id
  team            Team               @relation(fields: [teamId], references: [id])
  teamId          String             @unique
  customerId      String
  status          SubscriptionStatus
  planId          String
  variantId       String
  nextPaymentDate DateTime?
}

model Industry {
  id    String  @id @default(cuid())
  slug  String  @unique
  name  String  @unique
  brand Brand[]

  @@index([slug])
}

model BusinessType {
  id    String  @id @default(cuid())
  slug  String  @unique
  name  String  @unique
  brand Brand[]

  @@index([slug])
}

model glossary {
  id                BigInt   @id @default(autoincrement())
  created_at        DateTime @default(now())
  term              String
  definition        String?
  video             String?
  short_description String?
  content           String?
  example           String?
  ELIM              String?
  updated_at        DateTime @updatedAt
  faqs              Json?
  slug              String   @unique

  @@index([slug])
}

model post {
  id             BigInt   @id @default(autoincrement())
  created_at     DateTime @default(now())
  title          String
  slug           String
  except         String?
  author_fk      String?
  content        String?
  featured_image String?
}

enum UserRole {
  USER
  ADMIN
}

enum UserOneTimePasswordType {
  SIGNUP
  LOGIN
  PASSWORD_RESET
}

enum TeamMemberRole {
  MEMBER
  OWNER
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAUSED
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  EXPIRED
}
